package ru.lexpr.datasync;

import java.util.function.DoubleFunction;

public class Integral {
	
	public static final int STEPS = 10000000;
	public static final int THREADS = 10;
	volatile double result = 0.0;
	
	private Integral() {
	}
	
	public static double singleThread(DoubleFunction<Double> f, double a, double b) {
		
		double summa = 0d;
		double h = (b-a)/steps;
		
		for(int i=0; i < steps; i++) {
			double x = a+h*i+h/2;
			double y = f.apply(x);
			summa += y*h;
		}
		
		return summa;
	}
}

/*
	public static double singleThread(MathFunction f, double a, double b) {
		
		return singleThread(f, a, b, STEPS);
	}
	
	public static double multiThread(MathFunction f, double a, double b) throws InterruptedException {
		
		Integral sync = new Integral();
		Thread[] threads = new Thread[THREADS];
		double h = (b-a)/THREADS;
		
		for(int i=0; i < THREADS; i++) {
			
			double at = a+h*i;
			double bt = at+h;
			threads[i] = new IntegralThread(sync, f, at, bt, STEPS/THREADS);
			threads[i].start();
		}
		
		for(Thread t : threads)
			t.join();
		
		return sync.result;
		
	}

}

class IntegralThread extends Thread {
	
	private Integral result;
	private MathFunction f;
	private double a,b;
	private int steps;
	
	public IntegralThread(Integral result, MathFunction f, 
			double a, double b, int steps) {
		
		super();
		this.result = result;
		this.f = f;
		this.a = a;
		this.b = b;
		this.steps = steps;
	}
	
	@Override
	public void run() {
		
		double r = Integral.singleThread(f, a, b, steps);
		synchronized (result) {
			result.result += r;
		}
	}
	
}
*/